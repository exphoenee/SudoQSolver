class Solver{constructor(initialBoard=null,sectionSize=null){this.sectionSize=sectionSize||3,this.cellsInSection=this.sectionSize**2,this.board=document.getElementById("board"),this.cells=[],this.render()}render(){for(let rowNr=0;rowNr<this.cellsInSection;rowNr++)this.cells.push(this.renderRow(rowNr))}renderRow(rowNr){let row=[];const rowContainer=document.createElement("div");rowContainer.classList.add(`row-${rowNr}`);for(let colNr=0;colNr<this.cellsInSection;colNr++)row.push(this.createInput(colNr,rowNr,rowContainer));return this.board.appendChild(rowContainer),row}createInput(colNr,rowNr,parent){const cell=document.createElement("input");return cell.type="number",cell.step=1,cell.min=1,cell.max=this.cellsInSection,cell.id=`C${Math.floor(1e7*Math.random()).toString().padStart(8,0)}`,cell.classList.add("tile"),cell.dataset.col=colNr,cell.dataset.row=rowNr,cell.addEventListener("change",e=>this.update(e)),parent.appendChild(cell),cell}}const solver=new Solver;
//# sourceMappingURL=app.min.js.map