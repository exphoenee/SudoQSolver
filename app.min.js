class Solver{constructor(initialBoard=null,sectionSize=null){this.sectionSize=sectionSize||3,this.cellsInSection=this.sectionSize**2,this.board=document.getElementById("board"),this.cells=[],this.examples={noSolution:[[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],clear:[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],easy:[[1,0,0,0,0,7,0,0,3],[9,0,6,0,0,8,2,0,4],[0,3,0,5,2,0,0,9,0],[3,9,0,0,0,1,5,0,0],[0,0,5,0,0,0,9,0,0],[0,0,1,2,0,0,0,4,7],[0,2,0,0,6,5,0,1,0],[5,0,8,1,0,0,7,0,2],[6,0,0,7,0,0,0,0,5]],medium:[[6,0,0,8,4,9,0,0,2],[0,0,0,3,0,2,0,0,0],[0,2,3,0,0,0,0,9,6],[1,4,0,0,0,0,0,8,3],[5,0,0,0,0,0,0,0,9],[9,3,0,0,0,0,0,2,5],[0,5,6,0,0,0,3,1,0],[0,0,0,6,0,5,0,0,0],[2,0,0,7,8,3,0,0,6]],hard:[[0,0,0,0,7,0,0,0,6],[0,6,0,8,0,9,1,0,0],[9,0,0,0,0,0,0,8,0],[0,3,0,0,5,7,0,9,0],[2,0,0,9,3,4,0,0,9],[0,5,0,2,8,0,0,7,0],[0,2,0,0,0,0,0,0,0],[0,0,6,5,0,2,0,4,0],[5,0,0,0,1,0,3,0,0]],evil:[[0,4,0,2,0,0,0,7,0],[3,9,0,0,0,7,0,8,1],[7,0,6,0,0,1,4,0,2],[0,0,0,0,0,0,3,0,9],[0,0,0,0,0,0,0,0,0],[6,0,7,0,0,0,0,0,0],[1,0,4,3,0,0,8,0,5],[2,6,0,1,0,0,0,3,7],[0,8,0,0,0,2,0,6,0]]},this.render()}solvePuzzle(){const startingPuzzle=this.extractInputs();console.log(startingPuzzle);const boardHasIssue=this.boardHasIssue(startingPuzzle);console.log(boardHasIssue)}boardHasIssue(puzzle){return this.checkRows(puzzle)}checkRows(puzzle){return puzzle.map(row=>this.checkBatchIsUnique(row))}checkBatchIsUnique(batch){const onlyNums=batch.filter(num=>0!=this.validateValue(num));return new Set(onlyNums).size==onlyNums.length}update(puzzle){this.cells.forEach((row,rowNr)=>row.forEach((cell,colNr)=>cell.value=this.validateValue(puzzle[rowNr][colNr])))}extractInputs(){return this.cells.map(row=>row.map(cell=>+cell.value))}validateValue(value){return value>=1&&value<=this.cellsInSection?value:""}render(){for(let rowNr=0;rowNr<this.cellsInSection;rowNr++)this.cells.push(this.renderRow(rowNr));for(let puzzle in this.examples)this.renderButton(puzzle,()=>this.update(this.examples[puzzle]));this.renderButton("Solve!",()=>this.solvePuzzle())}renderRow(rowNr){let row=[];const rowContainer=document.createElement("div");rowContainer.classList.add(`row-${rowNr}`);for(let colNr=0;colNr<this.cellsInSection;colNr++)row.push(this.createInput(colNr,rowNr,rowContainer));return this.board.appendChild(rowContainer),row}createInput(colNr,rowNr,parent){const cell=document.createElement("input");return cell.type="number",cell.step=1,cell.min=1,cell.max=this.cellsInSection,cell.id=`C${Math.floor(1e7*Math.random()).toString().padStart(8,0)}`,cell.classList.add("tile"),cell.dataset.col=colNr,cell.dataset.row=rowNr,cell.addEventListener("change",e=>this.update(e)),parent.appendChild(cell),cell}renderButton(text,cb){const button=document.createElement("button");button.innerText=text,button.addEventListener("click",()=>{cb()}),document.getElementById("control").appendChild(button)}}const solver=new Solver;
//# sourceMappingURL=app.min.js.map